{"version":3,"sources":["webpack:///src/app/pages/auth/login/login.component.ts","webpack:///src/app/pages/auth/login/login.component.html","webpack:///src/app/pages/auth/login/login-routing.module.ts","webpack:///src/app/pages/auth/login/login.module.ts"],"names":["LoginComponent","authService","fb","router","subscription","isValidEmail","hide","loginForm","group","username","required","pattern","password","minLength","unsubscribe","invalid","formValue","value","add","login","subscribe","res","navigate","field","message","get","errors","hasError","minlength","requiredLength","touched","dirty","valid","onLogin","selector","templateUrl","styleUrls","routes","path","component","LoginRoutingModule","forChild","imports","exports","LoginModule","declarations"],"mappings":"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","file":"pages-auth-login-login-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  private subscription: Subscription = new Subscription();\n  private isValidEmail = /\\S+@\\S+\\.\\S+/;\n  hide = true;\n  loginForm = this.fb.group({\n    username: ['', [Validators.required, Validators.pattern(this.isValidEmail)]],\n    password: ['', [Validators.required, Validators.minLength(6)]]\n  });\n\n  constructor(private authService: AuthService,\n    private fb: FormBuilder,\n    private router: Router) { }\n\n  ngOnInit(): void { }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  onLogin(): void {\n\n    if(this.loginForm.invalid){\n      return;\n    }\n\n    const formValue = this.loginForm.value;\n    this.subscription.add(\n      this.authService.login(formValue).subscribe(res => {\n        if (res) {\n          this.router.navigate(['/home']);\n        }\n      })\n    );\n  }\n\n  getErrorMessage(field: string): string {\n    let message;\n    if (this.loginForm.get(field).errors.required) {\n      message = 'Campo obligatorio';\n    } else if (this.loginForm.get(field).hasError('pattern')) {\n      message = 'Email no valido';\n    } else if (this.loginForm.get(field).hasError('minlength')) {\n      const minLength = this.loginForm.get(field).errors?.minlength.requiredLength;\n      message = `Longitud m√≠nimo ${minLength} caracteres`\n    }\n    return message;\n   \n  }\n\n  isValidField(field: string): boolean {\n\n    return (\n      (this.loginForm.get(field).touched || this.loginForm.get(field).dirty)\n      && !this.loginForm.get(field).valid\n    )\n\n  }\n\n}\n","<div class=\"login-form\"><nav></nav>\n    <mat-card>\n        <mat-card-content>\n            <h1>Login</h1>\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\n                <mat-form-field class=\"full-width-input\">\n                    <input type=\"text\" \n                    formControlName = \"username\"\n                    matInput \n                    placeholder=\"Username\" \n                    required>\n                    <mat-error *ngIf=\"isValidField('username')\">\n                        {{ getErrorMessage(\"username\") }}\n                    </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"full-width-input separator\">\n                    <input \n                    [type]= \"hide ? 'password' : 'text'\"   \n                    formControlName = \"password\"\n                    matInput \n                    placeholder=\"Password\" \n                    required>\n                    <button mat-icon-button matSuffix (click)=\"hide = !hide\"> \n                        <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n                    </button>\n                    <mat-error *ngIf=\"isValidField('password')\">\n                        {{ getErrorMessage(\"password\") }}\n                    </mat-error>\n                </mat-form-field>\n                <button [disabled] = \"loginForm.invalid\"\n                type=\"submit\" \n                mat-raised-button \n                color=\"primary\">Login</button>\n            </form>\n        </mat-card-content>  \n    </mat-card>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\nimport { MaterialModule } from 'src/app/material.module';\nimport { ReactiveFormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class LoginModule { }\n"]}